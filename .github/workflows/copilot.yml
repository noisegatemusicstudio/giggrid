name: Copilot Agent-RN Screen Generation

on:
  push:
    paths:
      - 'reference/**'
      - 'bdd/**'
      - 'src/**'
  pull_request:
    paths:
      - 'reference/**'
      - 'bdd/**'
      - 'src/**'

env:
  NODE_VERSION: '18'
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      reference-changed: ${{ steps.changes.outputs.reference }}
      bdd-changed: ${{ steps.changes.outputs.bdd }}
      src-changed: ${{ steps.changes.outputs.src }}
      screen-slug: ${{ steps.extract-screen.outputs.slug }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            reference:
              - 'reference/**'
            bdd:
              - 'bdd/**'
            src:
              - 'src/**'

      - name: Extract screen slug from reference changes
        id: extract-screen
        if: steps.changes.outputs.reference == 'true'
        run: |
          # Extract screen slug from changed reference files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep "^reference/" | head -1)
          if [ ! -z "$CHANGED_FILES" ]; then
            SCREEN_SLUG=$(echo "$CHANGED_FILES" | cut -d'/' -f2)
            echo "slug=$SCREEN_SLUG" >> $GITHUB_OUTPUT
            echo "Detected screen slug: $SCREEN_SLUG"
          fi

  bdd-generate:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.reference-changed == 'true' && needs.detect-changes.outputs.screen-slug != ''
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate BDD scenarios
        id: generate-bdd
        env:
          SCREEN_SLUG: ${{ needs.detect-changes.outputs.screen-slug }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "Generating BDD for screen: $SCREEN_SLUG"
          # This would call your BDD generation script
          # node scripts/generate-bdd.js "$SCREEN_SLUG"

          # For now, create a placeholder BDD file
          mkdir -p bdd
          cat > "bdd/${SCREEN_SLUG}.feature" << 'EOF'
          Feature: Welcome Screen
            As a new user
            I want to see a welcoming interface
            So that I can start using the app

            Scenario: User sees welcome screen
              Given I am a new user
              When I open the app
              Then I should see the welcome screen
              And I should see a welcome message
              And I should see call-to-action buttons

            Scenario: User can navigate from welcome screen
              Given I am on the welcome screen
              When I tap the main CTA button
              Then I should be navigated to the next screen
          EOF

      - name: Create BDD Pull Request
        if: steps.generate-bdd.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SCREEN_SLUG: ${{ needs.detect-changes.outputs.screen-slug }}
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create and switch to new branch
          BRANCH_NAME="bdd/$SCREEN_SLUG-$(date +%s)"
          git checkout -b "$BRANCH_NAME"

          # Add and commit BDD file
          git add "bdd/${SCREEN_SLUG}.feature"
          git commit -m "feat: Generate BDD scenarios for $SCREEN_SLUG screen"

          # Push branch
          git push origin "$BRANCH_NAME"

          # Create PR
          gh pr create \
            --title "[BDD] $SCREEN_SLUG Screen Scenarios" \
            --body "Auto-generated BDD scenarios for the $SCREEN_SLUG screen. Please review and edit as needed before merging." \
            --label "bdd,auto-generated" \
            --head "$BRANCH_NAME" \
            --base main

  code-generate:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.bdd-changed == 'true' && github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'accepted-bdd')
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate screen code and tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "Generating screen code and tests..."
          # This would call your code generation script
          # node scripts/generate-screen.js

          echo "Code generation completed successfully"

      - name: Create feature Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create and switch to new branch
          BRANCH_NAME="feat/screen-implementation-$(date +%s)"
          git checkout -b "$BRANCH_NAME"

          # Add all generated files
          git add src/
          git commit -m "feat: Generate screen implementation with tests"

          # Push branch
          git push origin "$BRANCH_NAME"

          # Create PR
          gh pr create \
            --title "[feat] Screen Implementation" \
            --body "Auto-generated screen implementation with comprehensive tests. All quality gates must pass before merge." \
            --label "feature,auto-generated" \
            --head "$BRANCH_NAME" \
            --base main

  pre-commit-checks:
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'feat/') || contains(github.event.pull_request.labels.*.name, 'feature')
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Jest Tests
        run: npm run test:coverage

      - name: SonarQube Scan
        if: env.SONAR_TOKEN != ''
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info

  e2e-tests:
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'feat/') || contains(github.event.pull_request.labels.*.name, 'feature')
    strategy:
      matrix:
        platform: [ios, android, web]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run submodule:update

      - name: Run E2E tests - iOS
        if: matrix.platform == 'ios'
        run: npm run e2e:ios

      - name: Run E2E tests - Android
        if: matrix.platform == 'android'
        run: npm run e2e:android

      - name: Run E2E tests - Web
        if: matrix.platform == 'web'
        run: npm run e2e:web

  await-manual-confirmation:
    runs-on: ubuntu-latest
    needs: [pre-commit-checks, e2e-tests]
    if: startsWith(github.head_ref, 'feat/') || contains(github.event.pull_request.labels.*.name, 'feature')
    steps:
      - uses: actions/checkout@v4

      - name: Wait for manual confirmation
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.payload.pull_request.number;

            // Function to check for approval comment
            async function checkForApproval() {
              const comments = await github.rest.issues.listComments({
                owner,
                repo,
                issue_number: pr_number
              });
              
              return comments.data.some(comment => 
                comment.body.includes('✅ looks good') && 
                comment.user.login === context.payload.pull_request.user.login
              );
            }

            // Wait for approval with timeout
            const maxWaitTime = 24 * 60 * 60 * 1000; // 24 hours
            const checkInterval = 5 * 60 * 1000; // 5 minutes
            const startTime = Date.now();

            while (Date.now() - startTime < maxWaitTime) {
              if (await checkForApproval()) {
                console.log('Manual approval received!');
                return;
              }
              
              console.log('Waiting for manual approval...');
              await new Promise(resolve => setTimeout(resolve, checkInterval));
            }

            // Send reminder if no approval after 24 hours
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr_number,
              body: '⏰ Gentle reminder: Please review the changes and comment "✅ looks good" to proceed with the final commit.'
            });

            throw new Error('Manual confirmation not received within 24 hours');

  final-commit:
    runs-on: ubuntu-latest
    needs: await-manual-confirmation
    if: success()
    steps:
      - uses: actions/checkout@v4

      - name: Final commit and merge preparation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "All gates passed and manual confirmation received"
          echo "Ready for merge!"

          # Add final commit marker
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create final commit
          git commit --allow-empty -m "✅ All quality gates passed - Ready for merge"
          git push origin HEAD
